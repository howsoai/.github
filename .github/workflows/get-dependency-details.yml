name: Reusable WF - Get Dependency Details

on:
  workflow_call:
    inputs:
      owner:
        required: false
        type: string
        default: "howsoai"
      repo:
        required: true
        type: string
      checkout-repo:
        description: Whether to checkout the above repo
        required: false
        type: boolean
        default: false
      payload:
        required: false
        type: string
      skip-version-json-check:
        required: false
        type: boolean
        default: false
    outputs:
      run-type:
        description: "Run type to be used in GitHub CLI command for dependency query"
        value: ${{ jobs.get-dependency-details.outputs.run-type }}
      run-id:
        description: "Run id to be used in GitHub CLI command for dependency query"
        value: ${{ jobs.get-dependency-details.outputs.run-id }}
      build-date:
        description: "The datetime of the run (non-release)"
        value: ${{ jobs.get-dependency-details.outputs.build-date }}
      build-title:
        description: "The display title of the run (non-release)"
        value: ${{ jobs.get-dependency-details.outputs.build-title }}
      head-sha:
        description: "The commit hash used for the workflow run"
        value: ${{ jobs.get-dependency-details.outputs.head-sha }}
      url:
        description: "A URL pointing to the workflow run"
        value: ${{ jobs.get-dependency-details.outputs.url }}

jobs:

  get-dependency-details:
    runs-on: ubuntu-latest
    outputs:
      run-type: ${{ steps.dependency.outputs.run-type }}
      run-id: ${{ steps.dependency.outputs.run-id }}
      build-date: ${{ steps.dependency.outputs.build-date }}
      build-title: ${{ steps.dependency.outputs.build-title }}
      head-sha: ${{ steps.dependency.outputs.head-sha }}
      url: ${{ steps.dependency.outputs.url }}
    steps:

      - uses: actions/checkout@v4
        if: inputs.checkout-repo == true
        with:
          token: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
          repository: ${{ inputs.owner }}/${{ inputs.repo }}

      - uses: actions/checkout@v4
        if: inputs.checkout-repo == false
        with:
          token: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}

      - name: Get dependency details
        id: dependency
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
        run: |
          echo "Parsing JSON payload: '${{ inputs.payload }}'..."
          ID=""

          if ! [[ -n "${{ inputs.payload }}" && $(echo '${{ inputs.payload }}' | jq 'has("${{ inputs.repo }}")') == true ]]; then
              # Repo not specified in payload; check version.json
              if [ "${{ inputs.skip-version-json-check }}" = true ]; then
                echo "No JSON payload given with repo ${{ inputs.repo }}, and skip-version-json-check flag is set. Exiting."
                exit 0
              elif [[ "${{ github.event.repository.name }}" == "howso-engine-py" && ${{ inputs.repo }} == "amalgam" ]]; then
                echo "Current repo is howso-engine-py, version.json will not include Amalgam information. Skipping."
                exit 0
              elif [[ "${{ github.event.repository.name }}" == "amalgam-lang-py" && ${{ inputs.repo }} == "howso-engine" ]]; then
                echo "Current repo is amalgam-lang-py, version.json will not include howso-engine information. Skipping."
                exit 0
              elif ! [[ -e version.json ]]; then
                # For the set-metadata workflow to be sufficiently generalized,
                # the skip-version-json-check flag cannot be set for amalgam or howso-engine,
                # even if the current repository does not have a version.json. Thus, kindly
                # exit if a version.json does not exist.
                echo "Current repository does not have a version.json"
                exit 0
              fi
              echo "No JSON payload given with repo ${{ inputs.repo }}, using version.json"
              ID=$(jq -r '.dependencies."${{ inputs.repo }}"' version.json)
              echo "Found build ID for ${{  inputs.repo }} in version.json: '$ID'"
          else
              ID=$(echo '${{ inputs.payload }}' | jq -r '."${{ inputs.repo }}"')
              echo "Payload contains build ID for ${{ inputs.repo }}: '$ID'"
          fi

          echo "Searching for ${{ inputs.repo }} build id '$ID'..."

          # If ID is a platform release tag, find the corresponding GitHub release
          if [[ "$ID" =~ "release-" ]]; then
            git fetch --tags
            commit_hash=$(git rev-list -n 1 "$ID")
            echo "$ID references a platform release with commit $commit_hash"

            # List all releases using GitHub CLI, getting just the tag names
            tags=$(gh release list --limit 15 --json tagName | jq -r '.[].tagName')

            # Loop through each tag to find a release with a matching commit hash
            matchedTag=""
            for tag in $tags; do
                # Fetch detailed information about the release, including the commit hash
                commit=$(gh release view $tag --json targetCommitish | jq -r '.targetCommitish')

                if [[ "$commit" == "$commit_hash" ]]; then
                    matchedTag=$tag
                    break
                fi
            done
            
            # If a matching tag is found, update $ID
            if [[ ! -z "$matchedTag" ]]; then
                ID=$matchedTag
                echo "Matching GitHub release found. ID updated to: $ID"
            else
                echo "No matching GitHub release found for $ID."
                exit 1
            fi
          fi

          # If ID is "latest", get the latest GitHub release
          if [[ "$ID" == "latest" ]]; then
            echo "Getting latest release..."
            # List all releases using GitHub CLI, but get just the latest
            gh release list 
            tags=$(gh release list --repo ${{ inputs.owner }}/${{ inputs.repo }} --json tagName,isLatest --jq '.[] | select(.isLatest)|.tagName')
            for tag in $tags; do
                ID=$tag
            done
            echo "$ID is the latest release"
          fi

          # Query the GitHub CLI for build artifacts
          if gh release view --repo ${{ inputs.owner }}/${{ inputs.repo }} "$ID" > /dev/null 2>&1; then
              # Release
              echo "Found release build"
              echo "run-type=$(echo "release")" >> $GITHUB_OUTPUT
              # Set metadata (sha, url)
              details=$(gh release view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json targetCommitish,url)
              head_sha=$(echo "$details" | jq '.targetCommitish')
              url=$(echo "$details" | jq '.url')
              echo "head-sha=$(echo $head_sha | tr -d '"')" >> $GITHUB_OUTPUT
              echo "url=$(echo $url | tr -d '"')" >> $GITHUB_OUTPUT
          elif gh run view --repo ${{ inputs.owner }}/${{ inputs.repo }} "$ID" > /dev/null 2>&1; then
              # Prerelease (workflow run)
              echo "Found non-release build"
              echo "run-type=$(echo "run")" >> $GITHUB_OUTPUT
              # Set metadata (build date, title, sha, url)
              details=$(gh run view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json createdAt,displayTitle,headSha,url)
              build_date=$(echo "$details" | jq '.createdAt')
              build_title=$(echo "$details" | jq '.displayTitle')
              head_sha=$(echo "$details" | jq '.headSha')
              url=$(echo "$details" | jq '.url')
              echo "build-date=$(echo $build_date | tr -d '"')" >> $GITHUB_OUTPUT
              echo "build-title=$(echo $build_title | tr -d '"')" >> $GITHUB_OUTPUT
              echo "head-sha=$(echo $head_sha | tr -d '"')" >> $GITHUB_OUTPUT
              echo "url=$(echo $url | tr -d '"')" >> $GITHUB_OUTPUT
          else
              echo "Build not found"
              exit 1
          fi

          echo "run-id=$(echo "$ID")" >> $GITHUB_OUTPUT
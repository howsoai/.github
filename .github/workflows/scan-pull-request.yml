name: "Reusable Workflow - Scan Pull Request"

on:
  workflow_call:
    inputs:
      upstream-packages:
        description: A whitespace separated list of Howso package dependencies [DEPRECATED].
        type: string
        required: false

jobs:

  scan-pull-request:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.check-requirements.outputs.changes }}
    steps:

      - uses: actions/checkout@v4

      - name: Check for requirements changes
        id: check-requirements
        run: |
          # Only run a scan if there have been changes to the main requirements.txt
          if [[ -e "requirements-3.11.txt" ]]; then
            req_file="requirements-3.11.txt"
          else
            echo "No requirements.txt found!"
            exit 0
          fi
          # Check for changes in requirements files on the current branch compared to the default branch
          git fetch
          git status
          changes=$(git diff "origin/${{ github.event.repository.default_branch }}" --name-only -- "$req_file")

          if [ -n "$changes" ]; then
              echo "Changes found in $req_file on branch ${{ github.head_ref }}."
          else
              echo "No changes to $req_file detected on ${{ github.head_ref }}."
          fi
          echo "changes=$(echo $changes)" >> $GITHUB_OUTPUT

      - name: Set up Python
        if: steps.check-requirements.outputs.changes != ''
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download Artifacts
        if: steps.check-requirements.outputs.changes != ''
        run: |
          if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi
          mkdir -p dist
          # Allow this to fail in case there are no 'main' requirements
          pip download -r requirements-3.11.txt -d ./dist || true
          # Remove upstream Howso packages since we don't want these to be scanned
          # Also omit jupyter_core and jupyter_client because JFrog does not correctly determine their licenses
          pip uninstall amalgam-lang howso-engine howso-synthesizer howso-validator howso-visuals howso-insights howso-openapi-client -y
          declare -a arr=("amalgam_lang" "howso_engine" "howso_synthesizer" "howso_validator" "howso_visuals" "howso-insights" "howso_openapi_client" "jupyter_core" "jupyter_client")
          for PKG in "${arr[@]}"; do
            rm -f ./dist/$PKG*
          done
          # Remove matplotlib, too, as its license is not properly detected
          rm -f ./dist/matplotlib*
          # Remove xgboost
          rm -f ./dist/nvidia*
          ls ./dist

      - uses: jfrog/setup-jfrog-cli@v4
        if: steps.check-requirements.outputs.changes != ''
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_ALLOWED_LICENSES: "Apache-1.0, Apache-1.1, Apache-2.0, Artistic-1.0, Artistic-1.0-Perl, Artistic-2.0, BSD, BSD 2-Clause, BSD 3-Clause, BSD-2-Clause, BSD-3-Clause, MIT, MPL-2.0"

      - name: üê∏ scan
        if: steps.check-requirements.outputs.changes != '' && false
        run: |
          if [[ ! -e "requirements-3.11.txt" ]]; then
            echo "Non-dev requirements file is not present"
            exit 0
          fi
          # Run the xray scan
          jf s ./dist/ --licenses --watches pipeline-distributed
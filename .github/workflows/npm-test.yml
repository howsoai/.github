name: Reusable WF - Test NPM Package

on:
  workflow_call:
    inputs:
      upstream-details:
        required: false
        type: string

defaults:
  run:
    shell: bash

jobs:
  npm-test:
    # Regression testing
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and embed Amalgam (WASM)
        if: inputs.upstream-details != ''
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
        run: |
            echo "Downloading and extracting Amalgam binaries..."
            run_type=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "amalgam" '.[$repo]."run_type"')
            run_id=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "amalgam" '.[$repo]."run_id"')
            if [[ -z "${run_id}" || -z "${run_type}" || "${run_id}" == "null" || "${run_type}" == "null" ]]; then
              echo "Amalgam run ID or run type not found (are they present in upstream-details?). Skipping WASM embed."
              exit 0
            else
              echo "Found Amalgam run ID ${run_id}; embedding in src/webassembly."
            fi
            # Clean out the directory
            rm -rf src/webassembly
            mkdir -p src/webassembly
            # Release WASM
            gh $run_type download -D src/webassembly -R "howsoai/amalgam" -p "*release-unknown-wasm64*" "$run_id"
            # Extract binaries
            cd src/webassembly && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
            cp bin/* .
            echo "Amalgam version:"
            cat docs/version.json
            rm -f *.tar.gz
            rm -rf bin
            rm -rf docs
            rm -rf *-wasm64
            # Debug WASM
            cd ../..
            gh $run_type download -D src/webassembly -R "howsoai/amalgam" -p "*debug-unknown-wasm64*" "$run_id"
            # Extract binaries
            cd src/webassembly && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
            cp bin/* .
            rm -f *.tar.gz
            rm -rf bin
            rm -rf docs
            rm -rf *-wasm64
            ls -l
            cd ../../

      - name: npm audit
        run: npm audit --audit-level=high --omit=dev

      - name: Install dependencies
        env:
          NPM_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
        run: |
          echo -e "\n//dpbuild.jfrog.io/:_authToken=${NPM_TOKEN}" >> .npmrc
          npm ci

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test

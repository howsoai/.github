name: Reusable WF - Run Pytest

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      platform-pretty:
        description: One of 'Windows', 'Linux', 'MacOS'
        required: true
        type: string
      config-fp:
        required: false
        type: string
      config-pretty:
        required: false
        type: string
        default: "[no config]"
      python-version:
        required: true
        type: string
      upstream-details:
        required: false
        type: string
      pmlb-cache:
        description: Downloads and extracts the PMLB dataset cache from the GitHub cache if true
        required: false
        type: boolean
        default: false
      move-data:
        description: Whether to move data from the 'howso' subdirectory of the PMLB cache into a repo-level 'data' folder
        required: false
        type: boolean
        default: false
      amalgam-plat-arch:
        description: The platform/arch string to match when downloading Amalgam builds
        required: false
        type: string
        default: "linux-amd64"
      workers:
        description: The number of Pytest workers to use
        type: string
        required: false
        default: '1'
      enable-utf8:
        description: Whether to enable the PYTHONUTF8 flag
        type: boolean
        default: false
      setup-docker:
        description: Whether to log in to the JFrog dpbuild docker registry
        type: boolean
        default: false
      targets:
        description: Multiple pytest targets to run as a matrix strategy (JSON)
        type: string
        required: false
        default: '["."]'
      extra-args:
        description: Additional Pytest args, such as a marker specification
        type: string
        required: false
      traces-fp:
        description: Path of Amalgam trace files
        type: string
        default: './traces'
        required: false
      telemetry:
        description: Whether to capture workflow telemetry
        type: boolean
        default: false
        required: false
      debug:
        description: Run Pytest with GDB and print a stacktrace (LINUX ONLY!)
        type: boolean
        required: false
        default: false
      doctest-modules:
        description: Run doctests in the provided module
        type: string
        required: false
      enable-spark:
        description: If true, sets up an Apache Spark cluster in the current environment.
        type: boolean
        required: false
        default: false
      enable-postgres:
        description: If true, sets up a Postgres container in the current environment.
        type: boolean
        required: false
        default: false
      results-summary-paths:
        description: Path(s) of markdown test summaries to upload as build artifacts, as a JSON list
        type: string
        required: false
      gen-rsa-keys:
        description: Generate public/private RSA key pairs and save to .public_key/.private_key files and ACCESS_TOKEN_[PUBLIC|PRIVATE]_KEY env vars
        type: boolean
        required: false
        default: false
      setup-script:
        description: Optional Python script to run before running unit tests
        type: string
        required: false

defaults:
  run:
    shell: bash

jobs:

  test:
    name: Pytest ${{ matrix.target }} (${{ inputs.python-version }}, ${{inputs.platform-pretty}}, ${{ inputs.config-pretty }})
    runs-on: ${{ inputs.platform }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(inputs.targets) }}
    steps:

      - uses: actions/checkout@v4

      - name: Collect Workflow Telemetry
        if: inputs.telemetry == true
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          comment_on_pr: off
          proc_trace_chart_show: off
          proc_trace_table_show: off

      - name: Pull GitHub cache
        if: inputs.pmlb-cache == true
        id: cache
        uses: actions/cache@v4
        env:
          cache-name: dataset-cache-${{ inputs.platform-pretty }}
        with:
          path: '~/dataset_cache'
          key: dataset-cache-${{ inputs.platform-pretty }}
      
      - name: Setup PMLB Cache
        if: inputs.pmlb-cache == true
        run: |
          if [[ "${{  inputs.platform-pretty }}" == "Windows" ]]; then
            pwd
            ls -l
          fi
          ls -l ~/dataset_cache
          mv ~/dataset_cache/dataset_cache.tar.gz dataset_cache.tar.gz && rm -rf dataset-cache
          tar xzvf dataset_cache.tar.gz
          ls .dataset_cache
          cp -r .dataset_cache ~/.dataset_cache

      - name: Move Howso Data to repo folder
        if: inputs.move-data == true
        run: |
          mkdir -p data && cp -r .dataset_cache/howso/* ./data/
          # Extract all compressed files
          find ./data/NYC_parking -type f -name "*.gz" -print0 | xargs -0 gunzip
          ls -a ./data/wikipedia

      - name: Set up Docker
        if: inputs.setup-docker == true
        run: |
          echo "${{ secrets.JFROG_ACCESS_TOKEN }}" | docker login dpbuild-docker-edge.jfrog.io --username "vsts-build@diveplane.com" --password-stdin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - uses: actions/setup-java@v4
        if: inputs.enable-spark == true
        with:
          java-version: '21'
          distribution: temurin

      - uses: vemonet/setup-spark@v1
        if: inputs.enable-spark == true
        with:
          spark-version: '3.5.3'
          hadoop-version: '3'

      - name: Enable Postgres
        if: inputs.enable-postgres == true
        run: |
          set -a
          if [[ -e .env ]]; then
            docker run --name postgres --env-file .env -p 5432:5432 -d postgres:latest
          elif [[ -e .env.sample ]]; then
            docker run --name postgres --env-file .env.sample -p 5432:5432 -d postgres:latest
          else
            echo "No .env or .env.sample found"
            exit 1
          fi
          set +a

      - name: Download dependencies
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
        run: |
          pwd
          while read -r repo; do
            echo "Getting details for $repo"
            # Remove carriage return character (Windows issue)
            repo=$(echo $repo | tr -d '\r')
            run_type=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_type"')
            run_id=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_id"')
            #run_type=$(python -c "import json; import os; import sys; print(json.loads(sys.argv[1])[sys.argv[2].replace('\r', '')]['run_type'])" '${{ inputs.upstream-details }}' $repo)
            #run_id=$(python -c "import json; import os; import sys; print(json.loads(sys.argv[1])[sys.argv[2].replace('\r', '')]['run_id'])" '${{ inputs.upstream-details }}' $repo)
            echo "run_type: $run_type, run_id: $run_id"
            IFS='-' read -r plat arch glibc <<< "${{ inputs.amalgam-plat-arch }}"
            if [[ "$repo" == "amalgam" && "${{ github.event.repository.name }}" == "amalgam-lang-py" ]]; then
              # Necessary since a-l-py tests will be run with an editable install of a-l-py
              echo "Downloading and extracting Amalgam binaries for $plat/$arch..."
              if [[ "$run_type" == "release" ]]; then
                gh $run_type download -D amalgam/lib/$plat/$arch -R "howsoai/$repo" -p "*${{ inputs.amalgam-plat-arch }}.tar.gz" "$run_id"
              else
                gh $run_type download -D amalgam/lib/$plat/$arch -R "howsoai/$repo" -p "*${{ inputs.amalgam-plat-arch }}" "$run_id"
              fi
              # Extract binaries
              cd amalgam/lib/$plat/$arch && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
              cp lib/* .
              ls -l
              cd ../../../..
            elif [[ "$repo" == "howso-engine" && "${{ github.event.repository.name }}" == "howso-engine-py" ]]; then
              # Necessary since hse-py tests will be run with an editable install of hse-py
              echo "Downloading and extracting Howso Engine CAMLs..."
              gh $run_type download -D howso/howso-engine -R "howsoai/$repo" -p "howso-engine-*" "$run_id"
              # Extract CAMLs
              cd howso/howso-engine && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
              pwd && ls -l
              cd ../..
            elif [[ "$repo" != "amalgam" && "$repo" != "howso-engine" ]]; then
              gh $run_type download -D $repo -R "howsoai/$repo" -p "*-py3-none-any*" "$run_id"
              # Needed because release/non-release downloads are different structure
              cd $repo && if [ ! -f *.whl ]; then mv */*.whl ./; fi
              cd ..
            fi
          done < <(printf "%s" '${{ inputs.upstream-details }}' | jq -rc 'keys[]')

      - name: Configure MacOS environment
        if: inputs.platform-pretty == 'MacOS'
        run: |
          brew install libomp

      - name: Download tz data
        if: inputs.platform-pretty == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path "./config/powershell/Download-Tzdata.ps1") {
            & "./config/powershell/Download-Tzdata.ps1"
          } else {
              Write-Host "Download-Tzdata script not found"
          }

      - name: Remove Pip cache
        if: inputs.platform-pretty == 'Windows'
        shell: bash
        run: rm -rf ~/AppData/Local/pip/cache

      - name: Install dependencies
        run: |
          # Upgrade Pip to latest version
          python -m pip install --upgrade pip

          # Set Pip extra index URL
          if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi

          # Install requirements.txt
          ./bin/build.sh install_deps ${{ inputs.python-version }}

          # Install any custom package versions
          echo "Installing custom packages..."
          while read -r repo; do
            set +e
            repo=$(echo "$repo" | tr -d '\r')  # Remove carriage return
            echo "Analyzing $repo for installable .whl files..."
            count=`ls -1 $repo/*.whl 2>/dev/null | wc -l`
            ls $repo
            echo "Found count: $count"
            if [[ $count != 0 && "$count" != "" ]]; then
              echo "Found custom $repo version; installing..."
              pip uninstall ${repo%-py} -y
              pip install $repo/*.whl --no-deps
            fi
            set -e
          done < <(printf "%s" '${{ inputs.upstream-details }}' | jq -rc 'keys[]')

          # Print dependency versions to terminal
          pip list | grep amalgam || true
          pip list | grep howso || true
          pip list | grep numpy || true
          env | grep HOWSO_CONFIG || true

      - name: Generate RSA keys
        if: inputs.gen-rsa-keys
        run: |
          openssl genrsa 1024 > ./private_key
          cat ./private_key | sed -e 's/^[ ]\*//' | openssl rsa -pubout > ./public_key

      - name: Run unit tests
        run: |
          # Set Howso environment variables

          # If the platform is Windows, specify UTF8 enconding as it may not be on by default
          if [[ ${{ inputs.enable-utf8}} == true ]]; then
            export PYTHONUTF8=1
          fi

          # Set access token environment variables if specified
          if [[ ${{ inputs.gen-rsa-keys }} == true ]]; then
            echo "Setting ACCESS_TOKEN_[PUBLIC|PRIVATE]_KEYS..."
            export ACCESS_TOKEN_PUBLIC_KEY=$(cat ./public_key)
            export ACCESS_TOKEN_PRIVATE_KEY=$(cat ./private_key)
          fi

          export TEST_OPTIONS=USE_HOWSO_CONFIG
          if [[ "${{ inputs.enable-postgres }}" == "true" ]]; then
            export ENVIRONMENT='test'
            set -a
            if [[ -e .env ]]; then
              echo "Sourcing environment variables from .env"
              source .env
            elif [[ -e .env.sample ]]; then
              echo "Sourcing environment variables from .env.sample"
              source .env.sample
            else
              echo "No .env or .env.sample found for Postgres config; proceed with caution"
            fi
            set +a
            env | grep POSTGRES
          fi
          if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi
          # Determine if using Amalgam MT/ST based on provided config
          if [[ "${{ inputs.config-fp }}" == *"-mt"* ]]; then
            AMLG_TYPE="mt"
          else
            AMLG_TYPE="st"
          fi

          # Adjust MT Howso config for debug mode (MT/Linux/amd64 ONLY)
          if [[ "${{ inputs.debug }}" == "true" && "${{ inputs.amalgam-plat-arch }}" == "linux-amd64" ]]; then
            echo "Enabling AMALGAM_FAST_MEMORY_INTEGRITY ($AMLG_TYPE)..."
            
            # Recipes have different structures which require custom config file paths
            if [[ "${{ github.event.repository.name }}" == "howso-synthesizer-recipes" ]]; then
              export HOWSO_CONFIG=~/work/howso-synthesizer-recipes/howso-synthesizer-recipes/config/latest-$AMLG_TYPE-debug-howso.yml
            elif [[ "${{ github.event.repository.name }}" == "howso-engine-recipes" ]]; then
              export HOWSO_CONFIG=~/work/howso-engine-recipes/howso-engine-recipes/config/latest-$AMLG_TYPE-debug-howso.yml
            elif [[ "${{ github.event.repository.name }}" == "howso-insights-recipes" ]]; then
              export HOWSO_CONFIG=~/work/howso-insights-recipes/howso-insights-recipes/config/latest-$AMLG_TYPE-debug-howso.yml
            else
              export HOWSO_CONFIG=./config/latest-$AMLG_TYPE-debug-howso.yml
            fi
          else
            export HOWSO_CONFIG=${{ inputs.config-fp }}
          fi
          # Set AMALGAM_LIBRARY_POSTFIX (for amalgam-lang-py UTs)
          if [[ "${{ inputs.debug }}" == "true" && "${{ inputs.amalgam-plat-arch }}" == "linux-amd64" ]]; then
            export AMALGAM_LIBRARY_POSTFIX="-$AMLG_TYPE-afmi"
          elif [[ "${{ inputs.config-fp }}" == *"-mt"* ]]; then
            export AMALGAM_LIBRARY_POSTFIX="-mt"
          else
            export AMALGAM_LIBRARY_POSTFIX="-st"
          fi

          # Set AWS credentials, if applicable
          if [[ "${{ secrets.AWS_TEST_RW_USERNAME }}" ]]; then
            echo "Setting AWS secrets..."
            export AWS_TEST_RW_USERNAME=${{ secrets.AWS_TEST_RW_USERNAME }}
            export AWS_TEST_RW_ACCESSKEY=${{ secrets.AWS_TEST_RW_ACCESSKEY }}
            export AWS_TEST_RW_ACCESSKEYSECRET=${{ secrets.AWS_TEST_RW_ACCESSKEYSECRET }}
          fi

          if [[ "${{ inputs.enable-postgres }}" == "true" ]]; then
            alembic upgrade head
          fi

          if [[ "${{ inputs.setup-script }}" != "" ]]; then
              # Run optional pre-test setup if provided
              python ${{ inputs.setup-script }}
          fi

          echo "Running pytests..."

          # Run tests in debug mode
          if [[ "${{ inputs.debug }}" == "true" && "${{ inputs.amalgam-plat-arch }}" == "linux-amd64" ]]; then
            # Run GDB in batch mode and capture the output
            sudo apt-get update
            sudo apt-get install -y gdb
            echo "GDB installation complete"
            set +e
            # Capture GDB output
            gdb_output=$(gdb -batch -ex run -ex backtrace --args python -m pytest ${{ inputs.extra-args}} ${{ matrix.target }})
            gdb_exit_code=$?
            echo "$gdb_output"
            # Evaluate GDB exit code and exit this workflow accordingly
            if echo "$gdb_output" | tail -n 100 | grep -q "exited normally"; then
              exit 0
            # Else, something failed, exit 1
            else
              exit 1
            fi
          fi

          # Run unit tests (non-debug)
          if [[ "${{ inputs.workers }}" == "off" ]]; then
            python -m pytest -s ${{ inputs.extra-args }} ${{ matrix.target }}  --junitxml=junit/test-results.xml
          else
            python -m pytest -s ${{ inputs.extra-args}} -n ${{ inputs.workers }} ${{ matrix.target }}  --junitxml=junit/test-results.xml
          fi

      - name: Run doctests
        if: inputs.doctest-modules != ''
        run: |
          python -m pytest --doctest-modules ${{ inputs.doctest-modules }} -v

      - name: Upload results summary
        id: upload-results-summary
        if: inputs.results-summary-paths != '' && always()
        continue-on-error: true
        run: |
          files=$(echo '${{ inputs.results-summary-paths }}' | jq -r '.[]')
          for file in $files; do
            cat $file
            echo -e "\n\n---\n\n" >> $GITHUB_STEP_SUMMARY
            cat "$file" >> $GITHUB_STEP_SUMMARY
          done

      - name: Check for skipped tests
        if: ${{ github.event.repository.name == 'howso-engine-py' || github.event.repository.name == 'howso-synthesizer-py' }} 
        continue-on-error: true
        run: |
          if ! [[ -e "junit/test-results.xml" ]]; then
            echo "junit/test-results.xml not found"
            exit 0
          fi
          SKIPPED=$(sed -n 's/.*skipped="\([0-9]\{1,\}\)".*/\1/p' junit/test-results.xml)
          if [[ "$SKIPPED" != "0" ]]; then
            echo "::warning title=Skipped Tests::[${{ inputs.python-version }}/${{inputs.platform-pretty}}/${{ inputs.config-pretty }}] This workflow run included ${SKIPPED} skipped tests!"
          fi

      - name: Upload trace files
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: "traces-${{ inputs.platform-pretty }}-${{ inputs.python-version }}-${{ inputs.config-pretty }}"
          path: ${{ inputs.traces-fp }}

      - name: Create environment repro script
        id: create-script
        if: always()
        continue-on-error: true
        run: |
          # Download the setup.sh template
          curl -L -o setup.sh https://raw.githubusercontent.com/howsoai/.github/refs/heads/main/workflow-templates/env-repro/setup.sh

          # Get current Python version
          python_version=$(python --version 2>&1 | awk '{print $2}')
          echo "Python $python_version"

          # Platform-agnostic find/replace with Python
          python3 -c "import sys; f=sys.argv[1]; placeholder=sys.argv[2]; var=sys.argv[3]; s=open(f).read().replace(placeholder, var); open(f, 'w').write(s)" setup.sh {PYTHON_VERSION} $python_version
          python3 -c "import sys; f=sys.argv[1]; placeholder=sys.argv[2]; var=sys.argv[3]; s=open(f).read().replace(placeholder, var); open(f, 'w').write(s)" setup.sh {HOWSO_CONFIG_PATH} ${{ inputs.config-fp }}
          python3 -c "import sys; f=sys.argv[1]; placeholder=sys.argv[2]; var=sys.argv[3]; s=open(f).read().replace(placeholder, var); open(f, 'w').write(s)" setup.sh {UPSTREAM_DETAILS} '${{ inputs.upstream-details }}'

          if  [[ "${{ inputs.platform-pretty }}" == "Windows" ]]; then
            # Ensure Unix line endings
           sed -i 's/\r$//' setup.sh
          fi

      - name: Upload environment repro script
        if: steps.create-script.outputs.exists != true && always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: env-repro-${{ inputs.config-pretty}}-${{ inputs.python-version }} 
          path: ./setup.sh
          overwrite: true
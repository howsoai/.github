name: Reusable WF - Run Pytest

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      platform-pretty:
        description: One of 'Windows', 'Linux', 'MacOS'
        required: true
        type: string
      config-fp:
        required: false
        type: string
      config-pretty:
        required: false
        type: string
        default: "[no config]"
      python-version:
        required: true
        type: string
      upstream-details:
        required: false
        type: string
      pmlb-cache:
        required: false
        type: boolean
        default: false
      amalgam-plat-arch:
        description: The platform/arch string to match when downloading Amalgam builds
        required: false
        type: string
        default: "linux-amd64"
      workers:
        description: The number of Pytest workers to use
        type: string
        required: false
        default: '1'
      enable-utf8:
        description: Whether to enable the PYTHONUTF8 flag
        type: boolean
        default: false

defaults:
  run:
    shell: bash

jobs:

  test:
    name: Pytest (${{ inputs.python-version }}, ${{inputs.platform-pretty}}, ${{ inputs.config-pretty }})
    runs-on: ${{ inputs.platform }}
    steps:

      - uses: actions/checkout@v4

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v1
        with:
          comment_on_pr: off
          proc_trace_chart_show: off
          proc_trace_table_show: off

      - name: Pull GitHub cache
        if: inputs.pmlb-cache == true
        id: cache
        uses: actions/cache@v3
        env:
          cache-name: dataset-cache-${{ inputs.platform-pretty }}
        with:
          path: ~/dataset_cache
          key: dataset-cache-${{ inputs.platform-pretty }}
      
      - name: Setup PMLB Cache
        if: inputs.pmlb-cache == true
        run: |
          ls -l ~/dataset_cache
          mv ~/dataset_cache/dataset_cache.tar.gz dataset_cache.tar.gz && rm -rf dataset-cache
          tar xzvf dataset_cache.tar.gz
          ls .dataset_cache
          cp -r .dataset_cache ~/.dataset_cache

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Download dependencies
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_CLASSIC_TOKEN }}
        run: |
          pwd
          while read -r repo; do
            echo "Getting details for $repo"
            # Remove carriage return character (Windows issue)
            repo=$(echo $repo | tr -d '\r')
            run_type=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_type"')
            run_id=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_id"')
            #run_type=$(python -c "import json; import os; import sys; print(json.loads(sys.argv[1])[sys.argv[2].replace('\r', '')]['run_type'])" '${{ inputs.upstream-details }}' $repo)
            #run_id=$(python -c "import json; import os; import sys; print(json.loads(sys.argv[1])[sys.argv[2].replace('\r', '')]['run_id'])" '${{ inputs.upstream-details }}' $repo)
            echo "run_type: $run_type, run_id: $run_id"
            IFS='-' read -r plat arch <<< "${{ inputs.amalgam-plat-arch }}"
            if [[ "$repo" == "amalgam" ]]; then
              echo "Downloading and extracting Amalgam binaries for $plat/$arch..."
              gh $run_type download -D amalgam/lib/$plat/$arch -R "howsoai/$repo" -p "*${{ inputs.amalgam-plat-arch }}*" "$run_id"
              # Extract binaries
              cd amalgam/lib/$plat/$arch && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
              cp lib/* .
              ls -l
              cd ../../../..
            elif [[ "$repo" == "howso-engine" ]]; then
              echo "Downloading and extracting Howso Engine CAMLs..."
              gh $run_type download -D howso/howso-engine -R "howsoai/$repo" -p "howso-engine-*" "$run_id"
              # Extract CAMLs
              cd howso/howso-engine && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
              pwd && ls -l
              cd ../..
            else
              gh $run_type download -D $repo -R "howsoai/$repo" -p "*-py3-none-any*" "$run_id"
              # Needed because release/non-release downloads are different structure
              cd $repo && if [ ! -f *.whl ]; then mv */*.whl ./; fi
              cd ..
            fi
          done < <(printf "%s" '${{ inputs.upstream-details }}' | jq -rc 'keys[]')

      - name: Configure MacOS environment
        if: inputs.platform-pretty == 'MacOS'
        run: |
          brew install libomp

      - name: Download tz data
        if: inputs.platform-pretty == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path "./config/powershell/Download-Tzdata.ps1") {
            & "./config/powershell/Download-Tzdata.ps1"
          } else {
              Write-Host "Download-Tzdata script not found"
          }

      - name: Run unit tests
        run: |
          python -m pip install --upgrade pip
          export TEST_OPTIONS=USE_HOWSO_CONFIG
          if [[ -n "${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi
          if [[ -n "${{ inputs.config-fp }}" ]]; then
            export HOWSO_CONFIG=${{ inputs.config-fp }}
          fi
          ./bin/build.sh install_deps ${{ inputs.python-version }}
          # Install any custom package versions
          declare -a arr=("howso-validator-enterprise-py" "howso-validator-py" "howso-synthesizer-py" "howso-engine-py" "amalgam-lang-py")
          for repo in "${arr[@]}"; do
            if [ -d "$repo" ]; then
              echo "Found custom $repo version; installing..."
              pip uninstall ${repo%-py} -y
              pip install $repo/*.whl
            fi
          done
          # The below may fail if there are no howso-branded packages installed, i.e., in the case of howso-run-py
          pip list | grep amalgam || true
          pip list | grep howso || true
          env | grep HOWSO_CONFIG || true
          echo "Running pytests..."

          # If the platform is Windows, specify UTF8 enconding as it may not be on by default
          if [[ ${{ inputs.enable-utf8}} == true ]]; then
            export PYTHONUTF8=1
          fi

          # Run unit tests
          if [[ "${{ inputs.workers }}" == "off" ]]; then
            python -m pytest -s
          else
            python -m pytest -n ${{ inputs.workers }} -s
          fi

      - name: Upload trace files
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: "traces-${{ inputs.platform-pretty }}-${{ inputs.python-version }}-${{ inputs.config-pretty }}"
          path: ./traces
name: Reusable WF - Compile Requirements

on:
  workflow_call:
    inputs:
      optional-dependencies:
        description: An optional dependency installation specification for use with a pyproject.toml.
        type: string
        required: false
        default: "[dev]"
      upstream-packages:
        description: A whitespace separated list of Howso package dependencies (e.g., "amalgam-lang-py howso-engine-py").
        type: string
        required: false

jobs:
  check-requirements:
    runs-on: ubuntu-latest
    outputs:
      dev_req_file: ${{ steps.detect-changes.outputs.dev-req-file }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Check for requirements changes
        id: detect-changes
        run: |
          # Determine which type of requirements/setup file exists in this repo
          if [ -e "pyproject.toml" ]; then
            echo "Found pyproject.toml"
            req_file="pyproject.toml"
          elif [ -e "requirements.in" ]; then
            echo "Found requirements.in"
            req_file="requirements.in"
            if [ -e "requirements-dev.in" ]; then
              dev_req_file="requirements-dev.in"
            fi
          fi

          # Warn if setup.py is used (should migrate to pyproject.toml)
          if [ -e "setup.py" ]; then
            echo "::warning file=setup.py::Please update to a pyproject.toml"
          fi

          # Check for changes in myfile.txt on the current branch compared to main branch
          git fetch
          git status
          changes=$(git diff "origin/main" --name-only -- "$req_file")

          if [ -n "$changes" ]; then
              echo "Changes found in $req_file on branch ${{ github.head_ref }}."
          else
              echo "No changes to $req_file detected on ${{ github.head_ref }}."
          fi

          echo "dev-req-file: $dev_req_file"

          echo "dev-req-file=$(echo $dev_req_file)" >> $GITHUB_OUTPUT

  compile-requirements:
    needs: ['check-requirements']
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      changes-pushed: ${{ steps.commit-changes.outputs.changes-pushed }}
    strategy:
      max-parallel: 1  # Necessary to avoid merge conflicts
      matrix:
        type: ['3.8', '3.9', '3.10', '3.11', 'licenses']
    steps:

      - uses: actions/checkout@v4
        with:
          # Check out with a PAT so that the workflow can make commits that re-trigger the PR build
          token: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Set up Python
        if: matrix.type != 'licenses'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.type }}

      - name: Set up Python (3.11 only)
        if: matrix.type == 'licenses'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Compile requirements
        if: matrix.type != 'licenses'
        id: compile-requirements
        run: |
          # Pull latest changes
          git pull
          # Set extra index URL
          if [[ -n "${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi
          # Install pip-tools and run pip-compile
          pip install -U pip pip-tools
          if [[ "${{ needs.check-requirements.outputs.dev_req_file }}" == "requirements-dev.in" ]]; then
            # --allow-unsafe: needed so that setuptools can be compiled, which is a dependency of pytest
            pip-compile requirements.in requirements-dev.in --resolver=backtracking --upgrade requirements.in --generate-hashes --no-emit-index-url --allow-unsafe --output-file requirements-${{ matrix.type }}.txt
          else
            pip-compile --resolver=backtracking --upgrade --generate-hashes --no-emit-index-url --allow-unsafe --output-file requirements-${{ matrix.type }}.txt
          fi

      - name: Generate third-party licenses
        if: matrix.type == 'licenses'
        id: gen-licenses
        run: |
          # Set extra index URL
          if [[ -n "${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi
          pip install -r requirements-3.11.txt
          # Allow this to fail in case the current repository isn't an installable Python package (i.e., recipes)
          pip install -e ."${{ inputs.optional-dependencies }}" || true
          # Do not include Howso software in the 3rd party license file
          this_repo="${{ github.repository }}"
          this_repo=${this_repo//-py/}  # Remove the "-py" postfix
          upstream_packages="${{ inputs.upstream-packages }}"
          upstream_packages=${upstream_packages//-py/}  # Remove all "-py" postfixes
          pip uninstall $upstream_packages
          pip uninstall $this_repo || true
          rm -f LICENSE-3RD-PARTY.txt
          pip install pip-licenses
          pip-licenses --with-authors --with-urls --with-license-file --with-description --format=plain-vertical  > ./LICENSE-3RD-PARTY.txt

      - name: Commit changes
        id: commit-changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes to pip requirements or third-party licenses detected. Making a new commit..."
            git config user.name "howso-automation"
            git config user.email "support@howso.com"
            git add .
            git commit -m "Automated requirements/license generation [${{ matrix.type }}]"
            git push
            echo "changes-pushed=$(echo 'true')" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in the repository."
          fi
name: Reusable WF - Compile Requirements

on:
  workflow_call:
    inputs:
      upstream-packages:
        description: A whitespace separated list of Howso package dependencies [DEPRECATED].
        type: string
        required: false
      extras:
        description: A whitespace-separated list of Python "extras" that should be installed into requirements-<version>-dev.txt
        type: string
        required: false
        default: "dev"
      branch:
        description: A branch to commit requirements to (defaults to github.head_ref)
        type: string
        required: false
        default: ${{ github.head_ref }}
      force-rebuild:
        description: Force a requirements rebuild even if no changes are detected
        type: boolean
        required: false
        default: false
      python-versions:
        description: Space-separated list of Python versions to build requirements for (e.g., "3.9 3.10 3.11")
        type: string
        required: false
        default: "3.9 3.10 3.11 3.12 3.13"
      license-python-version:
        description: Python version to use for license generation
        type: string
        required: false
        default: "3.12"
      regen-docs:
        description: For insights-llm repo. Runs `extract_docstrings.py`.
        type: boolean
        required: false
        default: false
      build-system:
        description: The build system specified in pyproject.toml (affecting requirements generation) [e.g., use "hatch" for Hatch]
        type: string
        required: false
        default: "setuptools"

jobs:
  check-requirements:
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      dev_req_file: ${{ steps.detect-changes.outputs.dev-req-file }}
      changes: ${{ steps.detect-changes.outputs.changes }}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Check for requirements changes
        id: detect-changes
        run: |
          # Determine which type of requirements/setup file exists in this repo
          if [ -e "pyproject.toml" ]; then
            echo "Found pyproject.toml"
            req_file="pyproject.toml"
          elif [ -e "requirements.in" ]; then
            echo "Found requirements.in"
            req_file="requirements.in"
            if [ -e "requirements-dev.in" ]; then
              dev_req_file="requirements-dev.in"
            fi
          else
            echo "No requirements.in or pyproject.toml found!"
            exit 1
          fi

          # Warn if setup.py is used (should migrate to pyproject.toml)
          if [ -e "setup.py" ]; then
            echo "::warning file=setup.py::Please update to a pyproject.toml"
          fi

          # Check for changes in the requirements files on the current branch compared to default branch
          git fetch
          git status
          changes=$(git diff "origin/${{ github.event.repository.default_branch }}" --name-only -- "$req_file")

          if [[ ! -n "$changes" && ! -e "requirements-3.11.txt" && ! -e "requirements-3.11-dev.txt" ]]; then
            echo "Requirements.txt does not exist!"
            changes="no requirements.txt"
          fi

          # Don't rebuild if the last commit was a rebuild
          if [[ "${{ github.actor }}" == "dmglennie-diveplane" || "${{ github.actor }}" == "HowsoAndrew" ]]; then
            echo "Requirements were generated in the last commit!"
            unset changes
          fi

          # Also don't rebuild if there was a previous rebuild at all
          echo "event_name: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER=$(echo "${{ github.ref }}" | sed 's/refs\/pull\/\([0-9]*\)\/merge/\1/')
            COMMITS=$(gh pr view $PR_NUMBER --json commits --jq '.commits[]')

            echo "Parsing PR #$PR_NUMBER for automated commits..."
            set +e
            echo "$COMMITS" | grep -q "howso-automation"
            if [ $? -eq 0 ]; then
              echo "At least one commit was authored by howso-automation; skipping rebuild."
              unset changes
            fi
            set -e
          fi

          if [ -n "$changes" ]; then
            echo "Changes found in $req_file on branch ${{ inputs.branch }}."
          else
            echo "No changes to $req_file detected on ${{ inputs.branch }}."
          fi

          echo "dev-req-file: $dev_req_file"

          echo "changes=$(echo $changes)" >> $GITHUB_OUTPUT
          echo "dev-req-file=$(echo $dev_req_file)" >> $GITHUB_OUTPUT

  compile-requirements:
    needs: ['check-requirements']
    if: needs.check-requirements.outputs.changes != '' || inputs.force-rebuild == true
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      GH_TOKEN: ${{ github.token }}
    steps:

      - uses: actions/checkout@v4
        with:
          # Check out with a PAT so that the workflow can make commits that re-trigger the PR build
          token: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
          ref: ${{ inputs.branch }}

      - name: Compile requirements (setuptools)
        if: inputs.build-system == 'setuptools'
        id: compile-requirements-setuptools
        run: |
          # Pull latest changes
          git pull
          # Install pyenv & Python build dependencies
          sudo apt update; sudo apt install build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev -y
          echo "Installing pyenv"
          curl https://pyenv.run | bash
          export PYENV_ROOT="$HOME/.pyenv"
          
          echo "PYENV_ROOT=$HOME/.pyenv" >> $GITHUB_ENV
          echo "$PYENV_ROOT/bin" >> $GITHUB_PATH
          echo "$PYENV_ROOT/shims" >> $GITHUB_PATH
          command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init -)"
          # Compile requirements
          IFS=' ' read -r -a versions <<< "${{ inputs.python-versions }}"
          for version in "${versions[@]}"; do
            echo "Installing Python $version"
            # Install Python
            pyenv install $version
            pyenv local $version
            python --version
            python -m pip install --upgrade pip
            bash -l
            # Set extra index URL
            if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
              export PIP_EXTRA_INDEX_URL="https://vsts-build@diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple"
            fi
            # Install pip-tools and run pip-compile
            pip install -U pip-tools
            if [[ "${{ needs.check-requirements.outputs.dev_req_file }}" == "requirements-dev.in" ]]; then
              # --allow-unsafe: needed so that setuptools can be compiled, which is a dependency of pytest
              cat requirements.in
              pip-compile requirements.in --upgrade --resolver=backtracking --no-emit-index-url --allow-unsafe -o requirements-$version.txt -v
              pip-compile requirements-dev.in requirements.in --upgrade --resolver=backtracking --no-emit-index-url --allow-unsafe -o requirements-$version-dev.txt -v
            else
              # --allow-unsafe: needed so that setuptools can be compiled, which is a dependency of pytest
              pip-compile --resolver=backtracking --upgrade --no-emit-index-url --allow-unsafe -o requirements-$version.txt -v
              # Check to see if any requirements were actually generated; don't commit "empty" requirements files
              if [[ $(wc -l <requirements-$version.txt) -le 7 ]]; then
                cat requirements-$version.txt
                echo "Removing empty requirements-$version.txt as it is empty."
                rm -f requirements-$version.txt
              fi
              # Generate dev/other extras requirements (pyproject.toml only)
              if [[ -e "pyproject.toml" ]]; then
                extras=""
                for extra in ${{ inputs.extras }}; do
                  extras+="--extra $extra "
                done
                echo "Got extras: $extras"
                # Only generate dev requirements if there are extras
                if [[ -n "$extras" ]]; then
                  pip-compile $extras --resolver=backtracking --upgrade --no-emit-index-url --allow-unsafe -o requirements-$version-dev.txt -v
                fi
              fi
            fi
          done

      - name: Generate third-party licenses (setuptools)
        id: gen-licenses-setuptools
        run: |
          which python
          eval "$(pyenv init -)"
          python --version
          pip list
          rm -f ./LICENSE-3RD-PARTY.txt
          # Set extra index URL
          if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL="https://vsts-build%40diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple"
          fi
          if [[ -e "requirements-${{ inputs.license-python-version }}.txt" ]]; then
            python -m pip install -r requirements-${{ inputs.license-python-version }}.txt --no-deps
          else
            echo "No main requirements.txt file found."
            exit 0
          fi
          # Do not include Howso software in the 3rd party license file
          pip uninstall amalgam-lang howso-engine howso-synthesizer howso-validator howso-validator-enterprise howso-visuals howso-openapi-client -y
          pip install pip-licenses
          pip-licenses --with-authors --with-urls --with-license-file --with-description --format=plain-vertical  > ./LICENSE-3RD-PARTY.txt

      - name: Set up Python
        if: inputs.build-system == 'hatch'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Compile requirements (hatch)
        if: inputs.build-system == 'hatch'
        id: compile-requirements-hatch
        run: |
          # Pull latest changes
          git pull
          # Install Hatch
          pip install hatch
          # Set extra index URL
          if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL="https://vsts-build@diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple"
          fi
          # Install pip-tools
          pip install -U pip-tools
          # Compile requirements
          hatch run freeze:freeze 

      - name: Generate third-party licenses (hatch)
        if: inputs.build-system == 'hatch'
        id: gen-licenses-hatch
        run: |
          rm -f ./LICENSE-3RD-PARTY.txt
          # Set extra index URL
          if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL="https://vsts-build%40diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple"
          fi
          if [[ -e "requirements-${{ inputs.license-python-version }}.txt" ]]; then
            python -m pip install -r requirements-${{ inputs.license-python-version }}.txt --no-deps
          else
            echo "No main requirements.txt file found."
            exit 0
          fi
          # Do not include Howso software in the 3rd party license file
          pip uninstall amalgam-lang howso-engine howso-synthesizer howso-validator howso-validator-enterprise howso-visuals howso-openapi-client -y
          pip install pip-licenses
          hatch run licenses:licenses
          sed -i 's/^[^ ]*\/site-packages\///' LICENSE-3RD-PARTY.txt

      - name: Regen docs
        if: inputs.regen-docs == true
        run: |
          python --version
          python extract_docstrings.py

      - name: Commit changes
        id: commit-changes
        run: |
          git pull
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes to pip requirements or third-party licenses detected. Making a new commit..."
            git config user.name "howso-automation"
            git config user.email "support@howso.com"
            git add *.txt
            if [[ "${{ inputs.regen-docs }}" == "true" ]]; then
              git add main/docstrings/*.json
            fi
            git commit -m "Automated requirements/license generation"
            git push
          else
            echo "No changes detected in the repository."
          fi

name: Reusable WF - Output Workflow Summary

on:
  workflow_call:
    inputs:
      upstream-details:
        type: string
        required: true
      validate-amlg-versions:
        type: boolean
        description: Validate whether the embedded Amalgam versions in howso-engine and amalgam-lang-py are compatible
        required: false
        default: false

jobs:

  output-summary:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download Artifacts
        # If the current repo is either of these, download the built artifact with embedded amalgam/howso-engine
        if: github.event.repository.name == 'amalgam-lang-py' || github.event.repository.name == 'howso-engine-py'
        uses: actions/download-artifact@v4
        with:
          path: ./tmp

      - name: Configure artifacts
        if: github.event.repository.name == 'amalgam-lang-py' || github.event.repository.name == 'howso-engine-py'
        run: |
          mkdir -p dist
          find ./tmp -type f -name '*.whl' -exec mv -t ./dist {} +
          rm -rf ./tmp

      - name: Download dependencies
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_CLASSIC_TOKEN }}
        run: |
          while read -r repo; do
            echo "Getting details for $repo"
            run_type=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_type"')
            run_id=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_id"')
            echo "Found run_type=$run_type and run_id=$run_id"
            if [[ "$repo" == "amalgam" || "$repo" == "howso-engine" ]]; then
              echo "Skipping: artifacts for $repo already embedded in built .whl file that will be installed later"
            else
              echo "Downloading $run_type artifacts..."
              gh $run_type download -D $repo -R "howsoai/$repo" -p "*-py3-none-any*" "$run_id"
              # Needed because release/non-release downloads are different structure
              cd $repo && if [ ! -f *.whl ]; then mv */*.whl ./; fi
              cd ..
            fi
          done < <(printf "%s" '${{ inputs.upstream-details }}' | jq -rc 'keys[]')

      - name: Generate workflow summary
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
        run: |
          if [[ ! -e "./.github/templates/version_summary.md" ]]; then
            echo "No workflow summary template found!"
            exit 0
          fi
          python -m pip install --upgrade pip
          if [[ -n "${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi
          ./bin/build.sh install_deps 3.11
          # If the current repo is amalgam-lang-py or howso-engine-py, uninstall the editable install and install the build artifact .whl
          if [[ "${{ github.event.repository.name }}" == "howso-engine-py" ]]; then
            echo "Installing howso-engine build artifact"
            pip uninstall howso-engine -y
            pip install ./dist/*.whl --no-deps --user
          elif [[ "${{ github.event.repository.name }}" == "amalgam-lang-py" ]]; then
            echo "Installing amalgam-lang build artifact"
            pip uninstall amalgam-lang -y
            pip install ./dist/*py3-none-manylinux_2_29_x86_64.whl --no-deps --user
          fi
          echo "Installing custom packages..."
          # Install any custom package versions
          declare -a arr=("howso-validator-enterprise-py" "howso-validator-py" "howso-synthesizer-py" "howso-engine-py" "amalgam-lang-py")
          for repo in "${arr[@]}"; do
            if [ -d "$repo" ]; then
              echo "Found custom $repo version; installing..."
              pip uninstall ${repo%-py} -y
              pip install $repo/*.whl --user
            fi
          done
          # The below may fail if there are no Howso packages installed, i.e., in the case of howso-run-py
          pip list | grep amalgam || true
          pip list | grep howso || true

          # Determine site-packages location (to retrieve version.json)
          site_packages=$(python -m site --user-site)

          # Get amalgam metadata from version.json
          echo "Getting Amalgam metadata..."
          ls -l $site_packages/amalgam/lib/
          amlg_version=$(jq -r '.version.amalgam' $site_packages/amalgam/lib/version.json)
          echo "Amalgam version: $amlg_version"
          amlg_sha=$(jq -r '.version."amalgam_sha"' $site_packages/amalgam/lib/version.json)
          amlg_url=$(jq -r '.version."amalgam_url"' $site_packages/amalgam/lib/version.json)
          if [[ $(cat $site_packages/amalgam/lib/version.json | jq '.version | has("amalgam_build_date")') == true && $(cat $site_packages/amalgam/lib/version.json | jq '.version.amalgam_build_date') != "\"\"" ]]; then
            # Version is a prerelease (workflow run)
            build_date=$(jq -r '.version."amalgam_build_date"' $site_packages/amalgam/lib/version.json)
            build_date=$(python -c "from datetime import datetime; print(datetime.strptime('$build_date', '%Y-%m-%dT%H:%M:%SZ').strftime('%A, %B %d, %I:%M %p'))")
            amlg_notes=$(jq -r '.version."amalgam_display_title"' $site_packages/amalgam/lib/version.json)
            amlg_notes=$(python -c "notes = '$amlg_notes'.split(' -')[0] if 'PR Build' in '$amlg_notes' else '$amlg_notes'; print(notes)")
            amlg_version=$(echo "$amlg_version ($build_date)")
          else
            # Version is a release
            amlg_notes=$(echo "Release version embedded in the installed \`amalgam-lang-py\`")
          fi
          # Substitute info into version_summary.md
          sed -i "s|{amalgam-version}|$amlg_version|g" ./.github/templates/version_summary.md
          sed -i "s|{amalgam-notes}|$amlg_notes|g" ./.github/templates/version_summary.md
          sed -i "s|{amalgam-sha}|$amlg_sha|g" ./.github/templates/version_summary.md
          sed -i "s|{amalgam-url}|$amlg_url|g" ./.github/templates/version_summary.md

          # If the current repo is amalgam-lang-py, there are no other dependencies to investigate. 
          if [[ "${{ github.event.repository.name }}" == "amalgam-lang-py" ]]; then
            # Remove unecessary quotations from variable substitutions
            sed -i "s|\"||g" ./.github/templates/version_summary.md
            # Output filled template file to workflow summary
            cat ./.github/templates/version_summary.md >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Optionally validate Amalgam versions
          if [[ ${{ inputs.validate-amlg-versions }} == true ]]; then
            engine_amlg_version=$(jq -r ".dependencies.amalgam" $site_packages/howso/howso-engine/version.json)
            echo "Validating howso-engine Amalgam version $engine_amlg_version against amalgam-lang-py with Amalgam version $amlg_version"
            # Check major versions only
            major_ver_1=$(echo "$engine_amlg_version" | cut -d'.' -f1)
            major_ver_2=$(echo "$amlg_version" | cut -d'.' -f1)
            if [[ "${major_ver_1}" != "${major_ver_2}" ]]; then
              echo "Critical failure: howso-engine Amalgam version ${engine_amlg_version} is incompatible with amalgam-lang-py embedded version ${amlg_version}"
              exit 1
            fi
          fi

          # Get howso-engine metadata from version.json
          hse_version=$(jq -r '."version"' $site_packages/howso/howso-engine/version.json)
          hse_sha=$(jq -r '."sha"' $site_packages/howso/howso-engine/version.json)
          hse_url=$(jq -r '."url"' $site_packages/howso/howso-engine/version.json)
          if [[ $(cat $site_packages/howso/howso-engine/version.json | jq '. | has("build_date")') == true && $(cat $site_packages/howso/howso-engine/version.json | jq '.build_date') != "\"\"" ]]; then
            # Version is a prerelease (workflow run)
            build_date=$(jq -r '."build_date"' $site_packages/howso/howso-engine/version.json)
            build_date=$(python -c "from datetime import datetime; print(datetime.strptime('$build_date', '%Y-%m-%dT%H:%M:%SZ').strftime('%A, %B %d, %I:%M %p'))")
            hse_notes=$(jq -r '."display_title"' $site_packages/howso/howso-engine/version.json)
            hse_notes=$(python -c "notes = '$hse_notes'.split(' -')[0] if 'PR Build' in '$hse_notes' else '$hse_notes'; print(notes)")
            hse_version=$(echo "$hse_version ($build_date)")
          else
            # Version is a release
            hse_notes=$(echo "Release version embedded in the installed \`howso-engine-py\`")
          fi
          # Substitute info into version_summary.md
          sed -i "s|{howso-engine-version}|$hse_version|g" ./.github/templates/version_summary.md
          sed -i "s|{howso-engine-notes}|$hse_notes|g" ./.github/templates/version_summary.md
          sed -i "s|{howso-engine-sha}|$hse_sha|g" ./.github/templates/version_summary.md
          sed -i "s|{howso-engine-url}|$hse_url|g" ./.github/templates/version_summary.md

          # Get Howso Python package metadata from workflow run or release install
          for repo in "${arr[@]}"; do
          pkg_version=$(python -c "
          import importlib.metadata
          try:
            print(importlib.metadata.version('${repo%-py}'))
          except importlib.metadata.PackageNotFoundError:
            print('noop')")
            
            # Get run_id and run_type for the current package
            run_type=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_type"')
            run_id=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_id"')
            pkg_url=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."url"')

            echo "Found run_type $run_type for repo $repo"
            
            if [[ "$run_type" == "run" ]]; then
              echo "Building workflow run details"
              pkg_url=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."url"')
              build_date=$(gh run view --repo howsoai/$repo $run_id --json createdAt | jq '.createdAt')
              build_date=$(python -c "from datetime import datetime; print(datetime.strptime($build_date, '%Y-%m-%dT%H:%M:%SZ').strftime('%A, %B %d, %I:%M %p'))")
              branch=$(gh run view --repo howsoai/$repo $run_id --json headBranch | jq '.headBranch')
              pkg_sha=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."head_sha"')
              pkg_notes=$(echo "Branch build of \`$branch\`")
              pkg_version=$(echo "$pkg_version ($build_date)")
            elif [[ "$run_type" == "release" ]]; then
              echo "Building release details (release specified in upstream-details)"
              pkg_notes=$(echo "Release version specified in Python requirements")
              pkg_sha=$(gh release view --repo howsoai/$repo $run_id --json targetCommitish | jq '.targetCommitish')
            else
              echo "Building release details (release NOT in upstream-details)"
              run_id=$(echo "$pkg_version")
              pkg_notes=$(echo "Release version specified in Python requirements")
              pkg_sha=$(gh release view --repo howsoai/$repo $run_id --json targetCommitish | jq '.targetCommitish')
              pkg_url=$(gh release view --repo howsoai/$repo $run_id --json url | jq '.url')
            fi
            sed -i "s|{$repo-version}|$pkg_version|g" ./.github/templates/version_summary.md
            sed -i "s|{$repo-notes}|$pkg_notes|g" ./.github/templates/version_summary.md
            sed -i "s|{$repo-sha}|$pkg_sha|g" ./.github/templates/version_summary.md
            sed -i "s|{$repo-url}|$pkg_url|g" ./.github/templates/version_summary.md
          done

          # Remove unecessary quotations from variable substitutions
          sed -i "s|\"||g" ./.github/templates/version_summary.md
          # Output filled template file to workflow summary
          cat ./.github/templates/version_summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload version summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "workflow-summary"
          path: ./.github/templates/version_summary.md
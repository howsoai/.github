name: Build Platform Container

on:
  workflow_call:
    inputs:
      build-type:
        type: string
        description: 'Build type'
        required: true
        default: 'release'
      runner:
        type: string
        description: 'Runner size'
        required: true
        default: 'platform-ubuntu-runner-medium'
      docker-repo:
        type: string
        description: 'Docker repository'
        required: true
    outputs:
      version:
        description: 'Calculated build version'
        value: ${{ jobs.build.outputs.version }}

permissions:
  contents: write
  id-token: write
  security-events: write

jobs:
  set-version:
    with:
      build-type: ${{ inputs.build-type }}
    uses: howsoai/.github/.github/workflows/set-version.yml@main 

  build:
    needs: set-version
    runs-on: ${{ inputs.runner }}
    outputs:
      version: ${{ needs.set-version.outputs.version }}
    env:
      DOCKER_REPO: ${{ inputs.docker-repo }}
      JFROG_CLI_BUILD_NAME: ${{ inputs.build-type }}-${{ github.event.repository.name }}
      JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine image tag
        id: determine_tag
        run: |
          echo "Release version: ${{ needs.set-version.outputs.version }}"
          if [ "${{ inputs.build-type }}" == "release" ]; then
            echo "IMAGE_TAG=${{ needs.set-version.outputs.version }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=pr-${{ needs.set-version.outputs.version || 'manual' }}-rc" >> $GITHUB_ENV
          fi

      - uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
        with:
          oidc-provider-name: setup-jfrog-cli
          disable-auto-build-publish: true
          disable-job-summary: true

      - name: Login to Artifactory
        uses: docker/login-action@v3
        with:
          registry: dpbuild-docker-edge.jfrog.io
          username: vsts-build@diveplane.com
          password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          push: true 
          tags: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            HOWSO_CONFIG_AMLG_APIKEY=${{ secrets.HOWSO_CONFIG_AMLG_APIKEY }}
            PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple

      - name: JFrog docker X-ray local scan
        run: |  
          jf docker pull ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
          jf docker scan ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}

      - name: Add docker package to build
        run: |
          docker images
          echo "${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}@${{ steps.build.outputs.digest }}" > metadata.json
          jf rt build-docker-create docker-edge --image-file=metadata.json
          jf rt build-collect-env
          jf rt build-add-git

      - name: Dry run publish build to Artifactory
        run: |
          jf rt build-publish --dry-run

      - name: Publish build to Artifactory
        run: |
          jf rt build-publish 

      - name: Trigger Xray scan in Artifactory
        run: |
          jf build-scan

      - name: Create Git tag
        if: ${{ inputs.build-type == 'release' }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a version-${{ needs.set-version.outputs.version }} -m "Release ${{ needs.set-version.outputs.version }}"
          git push origin version-${{ needs.set-version.outputs.version }}

      - name: Print environment variables (Debugging)
        run: |
          echo "VERSION=${{ needs.set-version.outputs.version }}"
          echo "DOCKER_REPO=${{ env.DOCKER_REPO }}"
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"
          echo "RUNNER_SIZE=${{ inputs.runner }}"

      - name: Output version
        run: |
          echo "VERSION=${{ needs.set-version.outputs.version }}" >> $GITHUB_OUTPUT

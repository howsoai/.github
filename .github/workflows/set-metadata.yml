name: Reusable WF - Set Build Metadata

on:
  workflow_call:
    inputs:
      build-type:
        required: false
        type: string
      payload:
        required: false
        type: string
      optional-release-tag:
        required: false
        type: string
      amalgam-lang-py-build:
        required: false
        type: string
      howso-engine-py-build:
        required: false
        type: string
      howso-validator-py-build:
        required: false
        type: string
      howso-validator-enterprise-py-build:
        required: false
        type: string
      howso-synthesizer-py-build:
        required: false
        type: string
    outputs:
      upstream-details:
        value: ${{ jobs.set-metadata.outputs.upstream-details }}
      version:
        value: ${{ jobs.set-version.outputs.version }}

defaults:
  run:
    shell: bash

jobs:

  construct-payload:
    runs-on: ubuntu-latest
    outputs:
      payload: ${{ steps.construct-payload.outputs.payload }}
    steps:

    - name: Construct payload
      id: construct-payload
      run: |
        if [[ -n "${{ inputs.payload }}" ]]; then
          echo "Found preconstructed JSON payload"
          echo "payload=${{ inputs.payload }}" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Constructing JSON payload from raw inputs"
        payload="{}"

        # Get howso-engine-py version or run ID
        if [[ "${{ inputs.howso-engine-py-build }}" =~ runs/([0-9]+) ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${BASH_REMATCH[1]}" '. + {"howso-engine-py": $run_id}')
        elif [[ -n "${{ inputs.howso-engine-py-build }}" ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${{ inputs.howso-engine-py-build }}" '. + {"howso-engine-py": $run_id}')
        fi

        # Get amalgam-lang-py version or run ID
        if [[ "${{ inputs.amalgam-lang-py-build }}" =~ runs/([0-9]+) ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${BASH_REMATCH[1]}" '. + {"amalgam-lang-py": $run_id}')
        elif [[ -n "${{ inputs.amalgam-lang-py-build }}" ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${{ inputs.amalgam-lang-py-build }}" '. + {"amalgam-lang-py": $run_id}')
        fi

        # Get howso-validator-py version or run ID
        if [[ "${{ inputs.howso-validator-py-build }}" =~ runs/([0-9]+) ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${BASH_REMATCH[1]}" '. + {"howso-validator-py": $run_id}')
        elif [[ -n "${{ inputs.howso-validator-py-build }}" ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${{ inputs.howso-validator-py-build }}" '. + {"howso-validator-py": $run_id}')
        fi

        # Get howso-validator-enterprise-py version or run ID
        if [[ "${{ inputs.howso-validator-enterprise-py-build }}" =~ runs/([0-9]+) ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${BASH_REMATCH[1]}" '. + {"howso-validator-enterprise-py": $run_id}')
        elif [[ -n "${{ inputs.howso-validator-enterprise-py-build }}" ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${{ inputs.howso-validator-enterprise-py-build }}" '. + {"howso-validator-enterprise-py": $run_id}')
        fi

        # Get howso-synthesizer-py version or run ID
        if [[ "${{ inputs.howso-synthesizer-py-build }}" =~ runs/([0-9]+) ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${BASH_REMATCH[1]}" '. + {"howso-synthesizer-py": $run_id}')
        elif [[ -n "${{ inputs.howso-synthesizer-py-build }}" ]]; then
          payload=$(echo "$payload" | jq --arg run_id "${{ inputs.howso-synthesizer-py-build }}" '. + {"howso-synthesizer-py": $run_id}')
        fi

        echo "$payload"
        fmtd_payload=$(echo -n "$payload" | tr -d '\n')
        echo "payload=$fmtd_payload" >> $GITHUB_OUTPUT

  get-howso-synthesizer-py-details:
    needs: ['construct-payload']
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "howso-synthesizer-py"
      payload: "${{ needs.construct-payload.outputs.payload }}"
      skip-version-json-check: true

  get-howso-validator-enterprise-py-details:
    needs: ['construct-payload']
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "howso-validator-enterprise-py"
      payload: "${{ needs.construct-payload.outputs.payload }}"
      skip-version-json-check: true

  get-howso-validator-py-details:
    needs: ['construct-payload']
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "howso-validator-py"
      payload: "${{ needs.construct-payload.outputs.payload }}"
      skip-version-json-check: true

  get-howso-engine-py-details:
    needs: ['construct-payload']
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "howso-engine-py"
      payload: "${{ needs.construct-payload.outputs.payload }}"
      skip-version-json-check: true

  get-amalgam-lang-py-details:
    needs: ['construct-payload']
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "amalgam-lang-py"
      payload: "${{ needs.construct-payload.outputs.payload }}"
      skip-version-json-check: true

  set-metadata:
    needs: ['get-amalgam-lang-py-details', 'get-howso-engine-py-details', 'get-howso-validator-py-details', 'get-howso-validator-enterprise-py-details', 'get-howso-synthesizer-py-details']
    runs-on: ubuntu-latest
    outputs:
      upstream-details: ${{ steps.set-metadata-details.outputs.upstream-details }}
      build-type: ${{ steps.set-metadata-details.outputs.build-type }}
      config-file: ${{ steps.set-metadata-details.outputs.config-file }}
    steps:

      - name: set-metadata-details
        id: set-metadata-details
        run: |
          details="{}"
          if ! [[ -n "${{ needs.get-amalgam-lang-py-details.outputs.run-id }}" ]]; then
            # Append run-id, run-type, build-date, build-title, head-sha, url to metadata JSON
            details=$(echo "$details" | jq '. + {"amalgam-lang-py": "{}"}')
            details=$(echo "$details" | jq '."amalgam-lang-py".run_id="${{ needs.get-amalgam-lang-py-details.outputs.run-id }}"')
            details=$(echo "$details" | jq '."amalgam-lang-py".run_type="${{ needs.get-amalgam-lang-py-details.outputs.run-type }}"')
            details=$(echo "$details" | jq '."amalgam-lang-py".build_date="${{ needs.get-amalgam-lang-py-details.outputs.build-date }}"')
            details=$(echo "$details" | jq '."amalgam-lang-py".build_title="${{ needs.get-amalgam-lang-py-details.outputs.build-title }}"')
            details=$(echo "$details" | jq '."amalgam-lang-py".head_sha="${{ needs.get-amalgam-lang-py-details.outputs.head-sha }}"')
            details=$(echo "$details" | jq '."amalgam-lang-py".url="${{ needs.get-amalgam-lang-py-details.outputs.url }}"')
          fi
          if ! [[ -n "${{ needs.get-howso-engine-py-details.outputs.run-id }}" ]]; then
            # Append run-id, run-type, build-date, build-title, head-sha, url to metadata JSON
            details=$(echo "$details" | jq '. + {"howso-engine-py": "{}"}')
            details=$(echo "$details" | jq '."howso-engine-py".run_id="${{ needs.get-howso-engine-py-details.outputs.run-id }}"')
            details=$(echo "$details" | jq '."howso-engine-py".run_type="${{ needs.get-howso-engine-py-details.outputs.run-type }}"')
            details=$(echo "$details" | jq '."howso-engine-py".build_date="${{ needs.get-howso-engine-py-details.outputs.build-date }}"')
            details=$(echo "$details" | jq '."howso-engine-py".build_title="${{ needs.get-howso-engine-py-details.outputs.build-title }}"')
            details=$(echo "$details" | jq '."howso-engine-py".head_sha="${{ needs.get-howso-engine-py-details.outputs.head-sha }}"')
            details=$(echo "$details" | jq '."howso-engine-py".url="${{ needs.get-howso-engine-py-details.outputs.url }}"')
          fi
          if ! [[ -n "${{ needs.get-howso-validator-py-details.outputs.run-id }}" ]]; then
            # Append run-id, run-type, build-date, build-title, head-sha, url to metadata JSON
            details=$(echo "$details" | jq '. + {"howso-validator-py": "{}"}')
            details=$(echo "$details" | jq '."howso-validator-py".run_id="${{ needs.get-howso-validator-py-details.outputs.run-id }}"')
            details=$(echo "$details" | jq '."howso-validator-py".run_type="${{ needs.get-howso-validator-py-details.outputs.run-type }}"')
            details=$(echo "$details" | jq '."howso-validator-py".build_date="${{ needs.get-howso-validator-py-details.outputs.build-date }}"')
            details=$(echo "$details" | jq '."howso-validator-py".build_title="${{ needs.get-howso-validator-py-details.outputs.build-title }}"')
            details=$(echo "$details" | jq '."howso-validator-py".head_sha="${{ needs.get-howso-validator-py-details.outputs.head-sha }}"')
            details=$(echo "$details" | jq '."howso-validator-py".url="${{ needs.get-howso-validator-py-details.outputs.url }}"')
          fi
          if ! [[ -n "${{ needs.get-howso-validator-enterprise-py-details.outputs.run-id }}" ]]; then
            # Append run-id, run-type, build-date, build-title, head-sha, url to metadata JSON
            details=$(echo "$details" | jq '. + {"howso-validator-enterprise-py": "{}"}')
            details=$(echo "$details" | jq '."howso-validator-enterprise-py".run_id="${{ needs.get-howso-validator-enterprise-py-details.outputs.run-id }}"')
            details=$(echo "$details" | jq '."howso-validator-enterprise-py".run_type="${{ needs.get-howso-validator-enterprise-py-details.outputs.run-type }}"')
            details=$(echo "$details" | jq '."howso-validator-enterprise-py".build_date="${{ needs.get-howso-validator-enterprise-py-details.outputs.build-date }}"')
            details=$(echo "$details" | jq '."howso-validator-enterprise-py".build_title="${{ needs.get-howso-validator-enterprise-py-details.outputs.build-title }}"')
            details=$(echo "$details" | jq '."howso-validator-enterprise-py".head_sha="${{ needs.get-howso-validator-enterprise-py-details.outputs.head-sha }}"')
            details=$(echo "$details" | jq '."howso-validator-enterprise-py".url="${{ needs.get-howso-validator-enterprise-py-details.outputs.url }}"')
          fi
          if ! [[ -n "${{ needs.get-howso-synthesizer-py-details.outputs.run-id }}" ]]; then
            # Append run-id, run-type, build-date, build-title, head-sha, url to metadata JSON
            details=$(echo "$details" | jq '. + {"howso-engine-py": "{}"}')
            details=$(echo "$details" | jq '."howso-synthesizer-py".run_id="${{ needs.get-howso-synthesizer-py-details.outputs.run-id }}"')
            details=$(echo "$details" | jq '."howso-synthesizer-py".run_type="${{ needs.get-howso-synthesizer-py-details.outputs.run-type }}"')
            details=$(echo "$details" | jq '."howso-synthesizer-py".build_date="${{ needs.get-howso-synthesizer-py-details.outputs.build-date }}"')
            details=$(echo "$details" | jq '."howso-synthesizer-py".build_title="${{ needs.get-howso-synthesizer-py-details.outputs.build-title }}"')
            details=$(echo "$details" | jq '."howso-synthesizer-py".head_sha="${{ needs.get-howso-synthesizer-py-details.outputs.head-sha }}"')
            details=$(echo "$details" | jq '."howso-synthesizer-py".url="${{ needs.get-howso-synthesizer-py-details.outputs.url }}"')
          fi

          echo "upstream-details=$(echo $details)" >> $GITHUB_OUTPUT
  
  set-version:
    needs: ['set-metadata']
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.choose-version.outputs.version }}
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get previous git tag
        id: previous-tag
        run: |
          tag=$(git for-each-ref --sort=-creatordate --count 5 --format="%(refname:short)" "refs/tags/" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+" | head -n 1)
          echo "Found tag: $tag"
          echo "tag=$(echo tag)" >> $GITHUB_OUTPUT

      - name: Get next semver from previous tag
        id: next-semvers
        uses: WyriHaximus/github-action-next-semvers@v1
        with:
          version: ${{ steps.previous-tag.outputs.tag }}

      - name: Set PR version
        if: needs.set-metadata.outputs.build-type == 'PR'
        id: set-pr-version
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_ITERATION=${{ github.run_attempt }}.${{ github.run_number }}
          echo "version=$(echo ${{ steps.next-semvers.outputs.patch }}-alpha+PR.${PR_NUMBER}.${PR_ITERATION})" >> $GITHUB_OUTPUT

      - name: Set Branch version
        if: needs.set-metadata.outputs.build-type == 'branch'
        id: set-branch-version
        run: |
          BRANCH_ITERATION=${{ github.run_attempt }}.${{ github.run_number }}
          echo "version=$(echo ${{ steps.next-semvers.outputs.patch }}-alpha+BR.${{ github.ref_name }}.${BRANCH_ITERATION})" >> $GITHUB_OUTPUT

      - name: Make Version PEP-Compliant
        if: steps.set-pr-version != '' || steps.set-branch-version != ''
        id: pepify
        shell: bash
        run: |
          if [[ -n "${{ steps.set-pr-version.outputs.version }}" ]]; then
            echo "Found PR version to pepify..."
            semver=${{ steps.set-pr-version.outputs.version }}
          else
            echo "Found branch version to pepify..."
            semver=${{ steps.set-branch-version.outputs.version }}
          fi
          # Per PEP 440, the full scope of traditional semantic versioning is not valid in Python.
          int_only_br=$(echo "${{ github.ref_name }}" | sed 's/[^0-9]*//g')
          metadata=".dev$int_only_br"
          pepified_version=$(echo "$semver" | sed -r -e 's/-alpha/a0/g' -e 's/-beta/b0/g' -e 's/\+PR./\.dev/g' -e "s|\+BR.${{ github.ref_name }}.|$metadata|g" -e 's/([0-9]+\.[0-9]+\.[0-9]+)([a-b0-9]+)?([\.dev]+)?(([0-9]+)\.([0-9]+)(\.([0-9]+))?)?/\1\2\3\5\6\8/g')
          echo "Tagged version converted to PEP 440 standard: $pepified_version"
          echo "version=$pepified_version" >> $GITHUB_OUTPUT

      - name: Construct release tag
        if: needs.set-metadata.outputs.build-type == 'release'
        id: set-release-version
        run: |
          RELEASE_TAG=""

          # Check for null tag:
          if [[ "${{ inputs.optional-release-tag }}" = "0.0.0" || (-z "${{ inputs.optional-release-tag }}" && "${{ steps.previous-tag.outputs.tag }}" = "0.0.0") ]]; then
            echo "❌ - Null tag (0.0.0) is invalid for a release (hint: repo could contain no tags)"
            exit 1
          fi

          # If tag not given by user, deduce from commit titles since last tag:
          if test -z "${{ inputs.optional-release-tag }}"; then
            echo "Autoincrementing version based on previous commit titles since last tag"

            # Search previous commits for MAJOR/MINOR text tokens:
            IS_MAJOR_BUMP=false
            IS_MINOR_BUMP=false
            echo "Checking commit titles since last tag: '${{ steps.previous-tag.outputs.tag }}'..."
            COMMITS=$(git log --pretty=format:%s ${{ steps.previous-tag.outputs.tag }}..@)
            while read commit
            do
              if [[ $commit == *"MAJOR"* ]]; then
                echo -e "\tMajor: title='$commit'"
                IS_MAJOR_BUMP=true
              elif [[ $commit == *"MINOR"* ]]; then
                echo -e "\tMinor: title='$commit'"
                IS_MINOR_BUMP=true
              else
                echo -e "\tPatch: title='$commit'"
              fi
            done <<< "$COMMITS"

            # Set version according to what was found in commit titles:
            if [ "$IS_MAJOR_BUMP" = true ]; then
              echo "Bumping major version"
              RELEASE_TAG=${{ steps.next-semvers.outputs.major }}
            elif [ "$IS_MINOR_BUMP" = true ]; then
              echo "Bumping minor version"
              RELEASE_TAG=${{ steps.next-semvers.outputs.minor }}
            else
              # If no major/minor found, treat as patch:
              echo "Bumping patch version"
              RELEASE_TAG=${{ steps.next-semvers.outputs.patch }}
            fi
          else
            echo "Using user provided release tag"
            RELEASE_TAG=${{ inputs.optional-release-tag }}
          fi

          # Check if valid semver:
          regex='^([0-9]+\.){2}(\*|[0-9]+)(-.*)?$'
          if [[ ! "$RELEASE_TAG" =~ $regex ]]; then
            echo "❌ - Release tag is not a valid semver: $RELEASE_TAG"
            exit 1
          fi
          echo "✔ - Release tag is a valid semver"

          # Check if tag already exists:
          if git rev-parse "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "❌ - Release tag already exists: $RELEASE_TAG"
            exit 1
          fi
          echo "✔ - Release tag does not exist"

          echo "Release tag: $RELEASE_TAG"
          echo "version=$(echo $RELEASE_TAG)" >> $GITHUB_OUTPUT
    
      - name: choose-version
        id: choose-version
        run: |
          if [[ -n "${{ steps.pepify.outputs.version }}" ]]; then
            echo "Setting pepified PR/branch version"
            echo "version=${{ steps.pepify.outputs.version }}"
          elif [[ -n "${{ steps.set-release-version.outputs.version }}" ]]; then
            echo "Setting release version"
            echo "version=${{ steps.set-release-version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "There was a problem (version could not be determined)"
            exit 1
          fi